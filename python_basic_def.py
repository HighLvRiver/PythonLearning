#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Wed Mar 22 22:33:20 2017

@author: jayden.yoo
"""

# 파이썬 함수 기초 1 
## 함수(function)는 입력(input)을 받으면 그 입력에 해당하는 출력(output)을 내놓은 기계와 같다.

# 예를 들어 500원을 넣으면 생수가 나오고 1000원을 넣으면 콜라가 나오는 자판기는 다음과 같은 함수이다.
f(500) = "생수"
f(1000) = "콜라"

# 파이썬에는 def 키워드를 사용하여 다음과 같이 함수를 만들 수 있다.
def twotimes(x):
    y = 2 * x
    return y

# 이렇게 만들어진 함수를 사용하려면 함수 이름과 그 뒤에 괄호로 싸인 입력값을 넣으면 된다.
twotimes(2)

# Q1-1. 짝수가 입력되면 "짝수"라는 문자열을, 홀수가 입력되면 "홀수"라는 문자열을 출력하는 함수를 만든다.
# Q1-2. 윤년을 나타나는 수가 입력되면 "윤년"이라는 문자열을, 그렇지 않은 수가 입력되면 "평년"이라는 문자열을 출력하는 함수를 만든다.

# Q2. 평년의 경우에 1, 3, 5, 7, 8, 10, 12 월은 31일, 4, 6, 9, 11월은 30일, 2월은 28일이다.
# 월을 나타내는 숫자를 입력하면 그 달의 날짜 수를 출력하는 함수 days 를 만든다.
# >>> days1(11)
# 30


# 여러 개의 입력을 가지는 함수
def add(x, y):
    return x + y

add(1, 2)

def sum(a, b, c):
    s = a + b + c
    return s

sum(1, 2, 3)

# Q3. 년을 나타내는 숫자와 월을 나타내는 숫자를 입력하면 그 달의 날짜 수를 출력하는 함수 days2 를 만든다.
# >>> days2(2015, 1)
# 31


# 지역 변수
## 함수에 넣은 입력 변수나 함수 안에서 만들어진 변수는 함수 바깥에서는 사용할 수 없다. 
## 혹시 이름이 같은 변수가 있다고 하더라도 별개의 변수가 된다.
## 따라서 함수 안에서 만들어지고 사용되는 함수를 지역 변수, 영어로 local variable 이라고 한다.
def f(x):
    y = 10 * x
    print("y = ", y)
    return y

f(10)

y

y = 1000

y

f(1)

y

# Q1. 10개의 숫자를 입력하면 "그 숫자들의 합"과 
# "그 숫자들을 제곱한 숫자들의 합"의 차이를 계산하는 함수 diffsum를 만든다.


# 전역 변수
## 하지만 지역 변수와 반대로 함수 바깥에서 만들어진 변수는 함수 안에서 사용할 수 있다.

z = 3

def f2(x):
    y = z * x
    print("y =", y)
    print("z =", z)
    return y
    
f2(10)

# 다만 이 때 바깥의 변수와 같은 이름의 변수를 함수 안에 만들면 안된다.
# 만약 바깥의 변수와 같은 이름의 변수를 함수 안에 다시 만들면 
# 함수 안에서는 그 지역 변수를 사용하다가 함수 바깥으로 나오면 지역 변수는 사라지고 원래의 변수값으로 되돌아 온다.
# 따라서, 함수 안에서는 함수 바깥에 있는 변수의 값을 바꿀 수 없다.

z = 3

def f3(x):
    z = 99
    y = z * x
    print("y =", y)
    print("z =", z)
    return y
    
f3(10)

z

# 만약 함수안에서 함수 바깥에 있는 변수의 값을 꼭 바꿔야만 한다면 
# 다음과 같이 함수 이름 앞에 global 키워드를 선언해 주면 된다.


z = 3

def f4(x):
    global z
    z = 99
    y = z * x
    print("y =", y)
    print("z =", z)
    return y

f4(10)

z

# Q2. 함수 바깥에 m 이라는 변수를 만들고 그 값을 0으로 놓는다.
# 앞에서 만든 diffsum 함수를 고쳐서 함수를 실행할 때 마다 
# diffsum 함수에서 계산된 값이 원래 있던 m 보다 크면 m을 계산된 값으로 바꾸는 함수 diffsum2 를 만든다.


# # lambda 라는 치트도 존재한다
# t = lambda x:x*2+1
# t(6)
# t = lambda x: print("test: {}".format(x+3))
# t(2)

