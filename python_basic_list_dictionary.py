
# coding: utf-8

# # 파이썬에서 여러 개의 자료를 한 변수에 담기
# 
# 지금까지는 하나의 변수에 하나의 자료를 저장했다. 그러나 파이썬에서는 하나의 변수에 여러 개의 자료를 한꺼번에 저장하고 필요한 때에 꺼내 쓸 수도 있다.
# 
# 파이썬에서 하나의 변수에 여러 개의 자료를 저장하고 쓰는데는 크게 두 가지 방법을 사용한다.
# 
# 여러개의 자료가 순서를 가지는 경우에는 주로 리스트(list) 자료형을 사용
# 여러개의 자료가 이름을 가지는 경우에는 주로 딕셔너리(dictionary) 자료형을 사용

# 자료의 순서만 가지는 리스트 자료형

# In[1]:

x = [88, 90, 100]
x


# 인덱싱
# 
# 리스트 자료형 변수에서 특정한 자료를 꺼내려면 인덱싱(indexing)이라는 연산을 사용한다.
# 
# 인덱싱 연산을 하려면 다음과 같이 대괄호(bracket)를 변수 이름 끝에 붙이고 그 안에 자료의 순서를 뜻하는 숫자를 넣는다.
# 
# 리스트변수[인덱스]
# 
# 이 때 자료의 순서를 뜻하는 숫자를 인덱스(index)라고 한다. 
# 파이썬에서는 가장 첫번째 자료를 가리키는 인덱스는 1이 아니라 0이다.

# In[2]:

x[0]


# In[3]:

x[1]


# In[4]:

(x[0] + x[1]) / 2


# 연습문제1
# 
# 시험 성적을 나타내는 임의의 5개의 숫자를 리스트 변수 score에 넣고 평균을 구한다.

# In[5]:

score = [100,90,80,70,60]
avg_score = (score[0] + score[1] + score[2] + score[3] + score[4]) / 5
print(avg_score)


# In[6]:

score = [100,90,80,70,60]
avg_score = sum(score) / 5
print(avg_score)


# 자료의 이름만 가지는 딕셔너리 자료형
# 
# 딕셔너리 자료형에는 여러개의 자료를 이름을 붙여서 저장할 수 있다. 딕셔너리 자료형 변수는 다음과 같이 만든다.
# 
# 딕셔너리변수 = {자료이름1: 자료값1, 자료이름2: 자료값2, 자료이름3: 자료값3}
# 
# 이 때 자료의 갯수는 얼마가 되든 상관없다.
# 
# 파이썬에서는 자료의 이름을 키(key)라고 하고 자료의 값을 값(value)라고 한다.

# In[7]:

b = {"math": 88, "english": 90, "history": 100}
b 


# 딕셔너리 자료형 변수에서 특정한 자료를 꺼낼때도 마찬가지로 인덱싱(indexing) 연산을 한다.
# 
# 딕셔너리 자료형 변수에서 인덱싱 연산을 하는 경우에도 다음과 같이 대괄호(bracket)를 변수 이름 끝에 붙이고 그 안에 자료의 키를 넣는다.

# In[8]:

b["math"]


# In[9]:

b["english"]


# In[10]:

(b["math"] + b["english"]) / 2


# 파이썬에서는 자료의 키는 무엇이든 가능하다. 즉, 숫자도 키가 될 수 있다.

# In[11]:

b2 = {1: 10, 2: 20}
b2


# 자료형이 다른 경우
# 
# 리스트 변수에는 자료형이 같은 자료만 담을 수 있는 것은 아니고 자료형이 다른 자료들도 담을 수 있다. 예를 들어 정수형 자료와 실수형 자료, 그리고 문자열 자료를 한 리스트 변수에 넣는 것도 가능하다.

# In[12]:

d = [1, 3.14, "pi"]


# In[13]:

d[0]


# In[14]:

d[1]


# In[15]:

d[2]


# 심지어 리스트 변수에 또 다른 리스트 변수를 넣을 수도 있다.

# In[16]:

e = [[1, 10], [2, 20]]


# In[17]:

e[0]


# In[18]:

e[1]


# In[19]:

e[0][0]


# In[20]:

e[0][1]


# In[21]:

e[1][0]


# In[22]:

e[1][1]


# # 파이썬에서 리스트 변수 다루기
# 
# 자료의 갯수
# 
# 리스트 변수에 자료가 몇 개 들어가 있는지 알기 위해서는 len이라는 명령을 사용한다.

# In[23]:

a = [1, 2, 3]


# In[24]:

len(a)


# 수열 생성하기
# 
# 0부터 n-1까지 1씩 증가하는 n개의 숫자를 가지는 수열 리스트는 range 명령으로 생성한다.

# In[25]:

b = range(10)
b


# 만약 0이 아닌 다른 수부터 증가하게 하려면 다음과 같이 range 명령에 두 개의 숫자를 넣는다. 
# range 명령은 두 숫자 x, y 에 대해 x보다 같거나 크고(이상), y보다 작은(미만) 수열을 만든다. 즉 x는 시작값(start), y는 포함되지 않는 끝값(end) 역할을 한다.

# In[26]:

c = range(1, 10)
c


# 만약 1씩 증가하는 것이 아니라 2 혹은 3씩 증가하는 수열을 만들고 싶다면 range 명령에 세 개의 숫자를 넣는다. 세번째 숫자는 건너 뛰기 숫자(step) 역할을 한다.

# In[27]:

d = range(1, 10, 3)
d


# 자료 추가하기
# 
# 리스트 변수의 마지막에 자료를 더 추가하려면 다음과 같이 append 메서드를 사용한다. 이 때 메서드란 변수 다음에 점(.)을 찍고 쓰는 명령을 말한다.

# In[28]:

e = range(4)
e


# In[29]:

e.append(4)
e


# In[30]:

e.append(10)
e


# 자료 삭제하기
# 
# 리스트에서 자료를 하나 삭제하려면 다음과 같이 del 명령을 사용한다.

# In[31]:

f = range(5)
f


# In[32]:

f[0]


# In[33]:

del f[0]
f


# In[34]:

f[2]


# 슬라이싱
# 리스트에서 자료를 하나만 가져오는 것이 아니라 특정 범위의 자료를 모두 가져오고 싶다면 슬라이싱(slicing)이라는 방법을 사용한다.
# 
# 슬라이싱은 콜론(:)이라는 기호를 사용하여 리스트의 자료 범위를 나타내는 연산이다.
# 
# 예를 들어 20개의 숫자가 있는 리스트에서 앞의 5개만 가져오고 싶으면 다음과 같이 입력한다.

# In[35]:

g = range(20)
g


# In[36]:

g[0:5]


# In[37]:

g[:5]


# In[38]:

g[10:15]

